/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  1301: {
    ComplianceNFT: {
      address: "0x50c01dce509246f7ed0b484a66b262d7d1b063de",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "VALIDITY_DURATION",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "adminMint",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "adminRenew",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "adminRevoke",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAccountInfo",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "hasNFT",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "expiryTimestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "isCurrentlyCompliant",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAdmin",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAllHolders",
          inputs: [],
          outputs: [
            {
              name: "holders",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "tokenIds",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "expiries",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getApproved",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getContractInfo",
          inputs: [],
          outputs: [
            {
              name: "contractAddress",
              type: "address",
              internalType: "address",
            },
            {
              name: "adminAddress",
              type: "address",
              internalType: "address",
            },
            {
              name: "totalMinted",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "nextTokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getValidUntil",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isAdmin",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isApprovedForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isCompliant",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "ownerOf",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setApprovalForAll",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenOf",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "validUntil",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ApprovalForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTMinted",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "validUntil",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTRenewed",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "newValidUntil",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTRevoked",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC721IncorrectOwner",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InsufficientApproval",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721NonexistentToken",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 31406348,
    },
    CompliantLPHook: {
      address: "0x9b93a748CCF4E4D829cB6ad7aFD8e77DA20bca80",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_poolManager",
              type: "address",
              internalType: "contract IPoolManager",
            },
            {
              name: "_complianceNFT",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterAddLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "delta",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "feesAccrued",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int256",
              internalType: "BalanceDelta",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterDonate",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "amount0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "amount1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterInitialize",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "sqrtPriceX96",
              type: "uint160",
              internalType: "uint160",
            },
            {
              name: "tick",
              type: "int24",
              internalType: "int24",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterRemoveLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "delta",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "feesAccrued",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int256",
              internalType: "BalanceDelta",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterSwap",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct SwapParams",
              components: [
                {
                  name: "zeroForOne",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "amountSpecified",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "sqrtPriceLimitX96",
                  type: "uint160",
                  internalType: "uint160",
                },
              ],
            },
            {
              name: "delta",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int128",
              internalType: "int128",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeAddLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeDonate",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "amount0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "amount1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeInitialize",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "sqrtPriceX96",
              type: "uint160",
              internalType: "uint160",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeRemoveLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeSwap",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct SwapParams",
              components: [
                {
                  name: "zeroForOne",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "amountSpecified",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "sqrtPriceLimitX96",
                  type: "uint160",
                  internalType: "uint160",
                },
              ],
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int256",
              internalType: "BeforeSwapDelta",
            },
            {
              name: "",
              type: "uint24",
              internalType: "uint24",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "complianceNFT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IComplianceCheck",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getComplianceNFT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookInfo",
          inputs: [],
          outputs: [
            {
              name: "poolManager_",
              type: "address",
              internalType: "address",
            },
            {
              name: "complianceNFT_",
              type: "address",
              internalType: "address",
            },
            {
              name: "enforceCompliance_",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookPermissions",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct Hooks.Permissions",
              components: [
                {
                  name: "beforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeDonate",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterDonate",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeSwapReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterSwapReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterAddLiquidityReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterRemoveLiquidityReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getPoolManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isAddressCompliant",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "poolManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IPoolManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "ComplianceCheckFailed",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "action",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ComplianceCheckPassed",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "action",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "HookNotImplemented",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidComplianceNFT",
          inputs: [],
        },
        {
          type: "error",
          name: "NotCompliant",
          inputs: [],
        },
        {
          type: "error",
          name: "NotPoolManager",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 31402055,
    },
  },
  31337: {
    ComplianceNFT: {
      address: "0xe1aa25618fa0c7a1cfdab5d6b456af611873b629",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "name",
              type: "string",
              internalType: "string",
            },
            {
              name: "symbol",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "VALIDITY_DURATION",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "adminMint",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "adminRenew",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "adminRevoke",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "approve",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAccountInfo",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "hasNFT",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "expiryTimestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "isCurrentlyCompliant",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAdmin",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getAllHolders",
          inputs: [],
          outputs: [
            {
              name: "holders",
              type: "address[]",
              internalType: "address[]",
            },
            {
              name: "tokenIds",
              type: "uint256[]",
              internalType: "uint256[]",
            },
            {
              name: "expiries",
              type: "uint256[]",
              internalType: "uint256[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getApproved",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getContractInfo",
          inputs: [],
          outputs: [
            {
              name: "contractAddress",
              type: "address",
              internalType: "address",
            },
            {
              name: "adminAddress",
              type: "address",
              internalType: "address",
            },
            {
              name: "totalMinted",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "nextTokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getValidUntil",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isAdmin",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isApprovedForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isCompliant",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "name",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "ownerOf",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "safeTransferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "data",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setApprovalForAll",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "supportsInterface",
          inputs: [
            {
              name: "interfaceId",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "symbol",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenOf",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "tokenURI",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "string",
              internalType: "string",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "from",
              type: "address",
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "validUntil",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "Approval",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ApprovalForAll",
          inputs: [
            {
              name: "owner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTMinted",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "validUntil",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTRenewed",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "newValidUntil",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "NFTRevoked",
          inputs: [
            {
              name: "account",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Transfer",
          inputs: [
            {
              name: "from",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "to",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC721IncorrectOwner",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InsufficientApproval",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidApprover",
          inputs: [
            {
              name: "approver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidReceiver",
          inputs: [
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721InvalidSender",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ERC721NonexistentToken",
          inputs: [
            {
              name: "tokenId",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 5,
    },
    CompliantLPHook: {
      address: "0x8ce361602b935680e8dec218b820ff5056beb7af",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_poolManager",
              type: "address",
              internalType: "contract IPoolManager",
            },
            {
              name: "_complianceNFT",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterAddLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "delta",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "feesAccrued",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int256",
              internalType: "BalanceDelta",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterDonate",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "amount0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "amount1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterInitialize",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "sqrtPriceX96",
              type: "uint160",
              internalType: "uint160",
            },
            {
              name: "tick",
              type: "int24",
              internalType: "int24",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterRemoveLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "delta",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "feesAccrued",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int256",
              internalType: "BalanceDelta",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "afterSwap",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct SwapParams",
              components: [
                {
                  name: "zeroForOne",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "amountSpecified",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "sqrtPriceLimitX96",
                  type: "uint160",
                  internalType: "uint160",
                },
              ],
            },
            {
              name: "delta",
              type: "int256",
              internalType: "BalanceDelta",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int128",
              internalType: "int128",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeAddLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeDonate",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "amount0",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "amount1",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeInitialize",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "sqrtPriceX96",
              type: "uint160",
              internalType: "uint160",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeRemoveLiquidity",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct ModifyLiquidityParams",
              components: [
                {
                  name: "tickLower",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "tickUpper",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "liquidityDelta",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "salt",
                  type: "bytes32",
                  internalType: "bytes32",
                },
              ],
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "beforeSwap",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "currency0",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "currency1",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "fee",
                  type: "uint24",
                  internalType: "uint24",
                },
                {
                  name: "tickSpacing",
                  type: "int24",
                  internalType: "int24",
                },
                {
                  name: "hooks",
                  type: "address",
                  internalType: "contract IHooks",
                },
              ],
            },
            {
              name: "params",
              type: "tuple",
              internalType: "struct SwapParams",
              components: [
                {
                  name: "zeroForOne",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "amountSpecified",
                  type: "int256",
                  internalType: "int256",
                },
                {
                  name: "sqrtPriceLimitX96",
                  type: "uint160",
                  internalType: "uint160",
                },
              ],
            },
            {
              name: "hookData",
              type: "bytes",
              internalType: "bytes",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes4",
              internalType: "bytes4",
            },
            {
              name: "",
              type: "int256",
              internalType: "BeforeSwapDelta",
            },
            {
              name: "",
              type: "uint24",
              internalType: "uint24",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "complianceNFT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IComplianceCheck",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getComplianceNFT",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookInfo",
          inputs: [],
          outputs: [
            {
              name: "poolManager_",
              type: "address",
              internalType: "address",
            },
            {
              name: "complianceNFT_",
              type: "address",
              internalType: "address",
            },
            {
              name: "enforceCompliance_",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getHookPermissions",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct Hooks.Permissions",
              components: [
                {
                  name: "beforeInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterInitialize",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterAddLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterRemoveLiquidity",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterSwap",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeDonate",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterDonate",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "beforeSwapReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterSwapReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterAddLiquidityReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "afterRemoveLiquidityReturnDelta",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getPoolManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isAddressCompliant",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "poolManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IPoolManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "ComplianceCheckFailed",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "action",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ComplianceCheckPassed",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "action",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "HookNotImplemented",
          inputs: [],
        },
        {
          type: "error",
          name: "InvalidComplianceNFT",
          inputs: [],
        },
        {
          type: "error",
          name: "NotCompliant",
          inputs: [],
        },
        {
          type: "error",
          name: "NotPoolManager",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deployedOnBlock: 4,
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
